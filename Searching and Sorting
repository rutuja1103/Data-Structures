//NAME: RUTUJA BHANDIGANI
//SEARCHING: 1. LINEAR SEARCH   2.BINARY SEARCH
//SORTING :  1. BUBBLE SORT     2.SELECTION SORT     3.INSERTION SORT

#include<stdio.h>							//including header files
struct student								//defining structure for student database
{
    int rollno;
    char name[25];
    float per;
};

void accept(struct student s[25], int n)				//Accepting the student details
{  
    int i=0;
    for(i=0;i<n;i++)
    {
    printf("Enter your name:");
    scanf("%s",s[i].name);
    printf("Enter your roll no:");
    scanf("%d", &s[i].rollno);
    printf("Enter your percentage:");
    scanf("%f",&s[i].per);
    }
}

void display(struct student s[25], int n)				//displaying the student details
{  
    int i=0;
    for(i=0;i<n;i++)
    {
    printf("\nNAME:%s",s[i].name);
    printf("\nROLL NUMBER:%d",s[i].rollno);
    printf("\nPERCENTAGE:%f",s[i].per);
    }
}

int linear_s(struct student s[25], int n,int r)				//function for linear search
{
    int i;
    for(i=0;i<n;i++)
    {
        if(r==s[i].rollno)
            return i;
    }
        return -1;
}

void bubblesort(struct student s[25],int n)				//function for bubblesort
{
    struct student temp;
    int i,j;
    for(i=0;i<n-1;i++)
    {
        for(j=0;j<n-i-1;j++)
        {
            if(s[j].rollno>s[j+1].rollno)
            {
                temp=s[j];
                s[j]=s[j+1];
                s[j+1]=temp;
            }
        }
	printf("\nAfter %d iterations:\n",i+1);
	display(s,n);
    }
}

void selectionsort(struct student s[25],int n)				//function for selection sort
{
    	struct student temp;
	int i,j,index;	
	for(i=0;i<=n-1;i++)
	{
		index=i;
		for(j=i+1;j<n;j++)
		{
			if(s[j].rollno<s[index].rollno)
			{
				index=j;
			}
		}
		temp = s[i];
		s[i]=s[index];
		s[index]=temp;
	 printf("\nAfter %d iterations:\n",i+1);
	 display(s,n);
	 }
    
}

void insertionsort(struct student s[25],int n)				//function for insertion sort
{
	struct student temp;
	int i,j,temp1;
	for(i=1;i<n;i++)
	{
		temp1=s[i].rollno;
		temp=s[i];
		j=i-1;
		while(s[j].rollno>temp1 &&j>=0)
		{
			s[j+1]=s[j];
			j--;
		}
	s[j+1].rollno=temp1;
	s[j+1]=temp;
	printf("\nAfter %d iterations:\n",i);
	display(s,n);
	}
	
	
}

int binarysearch(struct student s[25],int n,int r)			//function for binary search
{
	int mid;
	int low=0,high=n-1;
    while(low<=high)
    {
    	mid=(low+high)/2;
    	if(r==s[mid].rollno)
    	{
    		return mid;
    	}
    	else if(r<s[mid].rollno)
    	{
    		high=mid-1;
    	}
    	else if(r>s[mid].rollno)
    	{
    		high=mid+1;
    	}
    	else
    		return -1;
    }
}


int main()
{
    struct student s[25];
    int n,i,r,q,t;
    printf("Enter the number of students:");
    scanf("%d",&n);
    printf("\n----ACCEPTING STUDENT DETAILS----\n");
    printf("\nEnter student details:\n");
    accept(s,n);
    do
    {
    printf("\n1.Display\n2.Linear search\n3.Bubble sort\n4.Selection sort\n5.Insertion sort\n6.Binary search");
    printf("\nEnter your choice\n");
    scanf("%d",&q);
    switch(q)
    {
        
        case 1:
            printf("\nDISPLAY\n");
            display(s,n);
            break;
        case 2:
            printf("\nLinear Search\n");
            printf("Enter the roll number you want to search\n");
            scanf("%d",&r);
            t=linear_s(s,n,r);
            if(t>=0)
            {
                printf("\nRecord found at position %d",t);
            }
            else
            {
                printf("\nRecord not found");
            }
            break;
        case 3:
            printf("\nBUBBLE SORT\n");
            bubblesort(s,n);
            break;
        case 4:
            printf("\nSELECTION SORT\n");
            selectionsort(s,n);
            break;
	case 5:
		printf("\nINSERTION SORT\n");
		insertionsort(s,n);
		break;
	case 6:
		printf("\nBINARY SEARCH\n");
		printf("Enter the roll number you want to search\n");
            	scanf("%d",&r);
           	t=binarysearch(s,n,r);
           	 if(t!=-1)
            	 {
                	printf("\nRecord found at position %d",t);
           	 }
            	else
            	{
                printf("\nRecord not found");
            	}
            	break;
		
        case 0:
            return 0;
        default:
            printf("\nWrong option\n");  
    }
    }while(q!='0');
        return 0;
}

