//NAME: RUTUJA BHANDIGANI
//THREADED BINARY TREE: PREORDER,INORDER TRAVERSAL
#include<iostream>
using namespace std;

class node							//creating class node
{
	public:
	        char data;
		node();
		node *left,*right;
		int lbit,rbit;
		friend class tbt;
};

node::node()							//default constructor
{
	lbit=1;
	rbit=1;
}

class tbt							//creating class for threaded binary tree
{
	node *root,*head;
	public:
		tbt();
		void create_tbt();
		void preorder_tbt();
		node *inorder_succ(node *);
		void inorder();
};

tbt::tbt()							//default constructor
{
	root=NULL;
	head=NULL;
	
}

void tbt::create_tbt()
{
	char ch,choice;
	int flag=0;
	node *temp,*curr;
	head=new node();
	root=new node();
	cout<<"\nEnter root data\t";
	cin>>root->data;
	head->left=root;
	head->right=head;
	root->left=root->right=head;
	head->lbit=head->rbit=0;
	do
	{
		temp=root;
		curr=new node();
		cout<<"Enter data\t";
		cin>>curr->data;
	
		while(flag==0)
		{
			cout<<"Where do you want to connect (l/r) of\t"<<temp->data;
			cin>>ch;
			if(ch=='l')
			{
				if(temp->lbit==1)
				{
					curr->left=temp->left;
					curr->right=temp;
					temp->left=curr;
					temp->lbit=0;
					flag=1;
				}
				else
					temp=temp->left;
			}
			if(ch=='r')
			{
				
				if(temp->rbit==1)
				{
					curr->right=temp->right;
					curr->left=temp;
					temp->right=curr;
					temp->rbit=0;
					flag=1;
				}
				else
					temp=temp->right;
			}
		}
		flag=0;
		cout<<"Do you want to continue ? (y/n)";
		cin>>choice;
	}while(choice=='y');
}

void tbt::preorder_tbt()					//displaying tbt using preorder
{
	node *temp=root;
	while(temp!=head)
	{
		cout<<temp->data<<"\t";
		while(temp->lbit==0)
		{
			temp=temp->left;
			cout<<temp->data<<"\t";
		}
		while(temp->rbit==1)
		{
			temp=temp->right;
		}
		if(temp->rbit==0)
		{
			temp=temp->right;
		}
	}
}

node * tbt::inorder_succ(node *temp)					//computing the inorder successor
{
	node *x;
	x=temp->right;
	if(temp->rbit==0)
	{
		while(x->lbit==0)
			x=x->left;
	}
	return x;
}

void tbt::inorder()							//displaying using inorder
{
	node *temp;
	temp=head;
	while(1)
	{
		temp=inorder_succ(temp);
		if(temp==head)
			break;
		else
			cout<<temp->data<<"\t";
	}
}
int main()
{
	tbt t;
	int q;
	do
	{
		cout<<"\n1.Create Threaded Binary tree\n2.Display using preorder\n3.Display using inorder\n4.Exit\n";
		cout<<"Enter your choice\t";
		cin>>q;
		switch(q)
		{
			case 1: cout<<"Creating TBT\n";
				t.create_tbt();
				break;
			case 2: cout<<"Displaying using Preorder\n";
				t.preorder_tbt();
				break;
			case 3: cout<<"Displaying using Inorder\n";
				t.inorder();
				break;
			case 4: return 0;
		}
	}while(q!=0);
}

