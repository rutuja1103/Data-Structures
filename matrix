//NAME: RUTUJA BHANDIGANI
//MATRIX: SIMPLE TRANSPOSE, FAST TRANSPOSE

#include<stdio.h>							//including header files
void accept(int mat[15][15],int r,int c)				//accepting elements of the matrix
{
	int i,j;
	printf("Enter the elements of the matrix");
	for(i=0;i<r;i++)
	{
		for(j=0;j<c;j++)
		{
			scanf("%d",&mat[i][j]);
		}
	}
}

void display(int mat[15][15],int r,int c)				//displaying the matrix 
{
	int i,j;
	printf("MATRIX ELEMENTS");
	for(i=0;i<r;i++)
	{
		printf("\n");
		for(j=0;j<c;j++)
		{
			printf("%d \t",mat[i][j]);
		}
	}
}
void gen_compact(int mat[15][15],int r,int c,int compact[15][3])	//generating compact form of the matrix
{
	int i,j;
	int k=1;
	for(i=0;i<r;i++)
	{
		for(j=0;j<c;j++)
		{
			if(mat[i][j]!=0)
			{
				compact[k][0]=i;
				compact[k][1]=j;
				compact[k][2]=mat[i][j];
				k++;
			}
		}
	}
	compact[0][0]=r;
	compact[0][1]=c;
	compact[0][2]=k-1;
}
void dispcomp(int compact[15][3])					//displaying the compact form
{
	int i,j;
	for(i=0;i<(compact[0][2]+1);i++)
	{
		printf("\n");
		for(j=0;j<3;j++)
		{
			printf("%d \t",compact[i][j]);
		}
	}
}

void simpletrans(int compact[30][3],int simplemat[30][3])		//function for simple transpose of the matrix
{
	int i,j,k,n;
	simplemat[0][0]=compact[0][1];
	simplemat[0][1]=compact[0][0];
	simplemat[0][2]=compact[0][2];
	k=1;
   	n=compact[0][2];
   
    	for(i=0;i<compact[0][1];i++)    
        	for(j=1;j<=n;j++)   
            		if(i==compact[j][1])
            		{
                		simplemat[k][0]=i;
                		simplemat[k][1]=compact[j][0];
                		simplemat[k][2]=compact[j][2];
                		k++;
            		}
}

void fasttrans(int compact[30][3], int fastmat[30][3])			//function for fast transpose of the matrix
{
	int i,t,p,rt[50],pos[50];

	for(i=0;i<compact[0][2];i++)
		rt[i]=pos[i]=0;

	for(i=1;i<=compact[0][2];i++)
	{
		t=compact[i][1];
		rt[t]=rt[t]+1;
	}
	
	pos[0]=1;
	for(i=1;i<=compact[0][2];i++)
		pos[i]=pos[i-1]+rt[i-1];

	for(i=1;i<=compact[0][2];i++)
	{
		p=compact[i][1];
		t=pos[p];
		pos[p]++;
		fastmat[t][0]=compact[i][1];
		fastmat[t][1]=compact[i][0];
		fastmat[t][2]=compact[i][2];
	}

	fastmat[0][0]=compact[0][1];
	fastmat[0][1]=compact[0][0];
	fastmat[0][2]=compact[0][2];
}                                           
         
int main()
{
	int compact[15][3],mat[15][15],simplemat[30][3],fastmat[30][3];
	int r,c,i,j,q;
	printf("\nEnter the number of rows:");
	scanf("%d",&r);
	printf("Enter the number of columns:");
	scanf("%d",&c);
	do
	{
	printf("\n1.Accept\n2.Display\n3.Generate compact matrix\n4.Simple Transpose\n5.Fast Transpose\n0.Exit\n");
	printf("\nEnter your choice");
	scanf("%d",&q);
	switch(q)
	{
	case 1:
		printf("\nACCEPT:\n");
		accept(mat,r,c);
		break;
	case 2:
		printf("\nDISPLAY:");
		display(mat,r,c);
		break;
	case 3:
		printf("\nCOMPACT MATRIX:");
		gen_compact(mat,r,c,compact);
		dispcomp(compact);
		break;
	case 4:
		printf("\nSIMPLE TRANSPOSE:");
		simpletrans(compact,simplemat);
		dispcomp(simplemat);
		break;
	case 5:
		printf("\nFAST TRANSPOSE:");
		fasttrans(compact,fastmat);
		dispcomp(fastmat);
		break;
	case 0:
		return 0;
	default:
		return 0;
	}
	}while(q!='0');
}


