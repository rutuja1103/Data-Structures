//NAME: RUTUJA BHANDIGANI
//STACK OPERATIONS:1.Postfix to infix
//		   2.Postfix to prefix
//		   3.Prefix to Postfix
//		   4.Prefix to Infix
//		   5.Infix to Postfix
//		   6.Infix to prefiX

#include<stdio.h>								//including header files
#include<ctype.h>
#include<string.h>
char stack[20][20];								// two dimensional stack
char stack1[50];								//one dimensional stack
int top=-1;
void push(char str[20])								//push function for 2-Dimensional stack
{
    top++;
    strcpy(stack[top],str);
}

char* pop()									//push function for 2-Dimensional stack
{
    char* temp=stack[top];
    top--;
    return temp;
}
void postin(char exp[20])							//converting postfix exp to infix exp
{
    int l,i;
    char str[20],str1[20],str2[20],op1[20],op2[20];
    for(i=0;exp[i]!='\0';i++)
    {
        if(exp[i]=='+'||exp[i]=='-'||exp[i]=='*'||exp[i]=='/')
        {
            strcpy(op1,pop());							
            strcpy(op2,pop());
            str2[0]='\0';
            str2[0]='(';							// (
            str2[1]='\0';
           
            strcat(str2,op2);							// (op2
            str1[0]='\0';
	    str1[0]=exp[i];
	    str1[1]='\0';
	    strcat(str2,str1);							// (op2 op
            strcat(str2,op1);							// (op2 op op1
	    str1[0]='\0';
            str1[0]=')';							// (op2 op op1)
            str1[1]='\0';
            strcat(str2,str1);
            push(str2);
        }
        else
        {
            str1[0]='\0';
            str1[0]=exp[i];
            str1[1]='\0';
            push(str1);
        }
    }
        strcpy(str1,pop());
        printf("%s",str1);
    
}
void postpre(char exp[20])							//converting postfix expression to pre
{
    int l,i;
    char str[20],str1[20],str2[20],op1[20],op2[20];
    for(i=0;exp[i]!='\0';i++)
    {
        if(exp[i]=='+'||exp[i]=='-'||exp[i]=='*'||exp[i]=='/')
        {
            strcpy(op1,pop());
            strcpy(op2,pop());
            str2[0]='\0';
            str2[0]='(';							// (
            str2[1]='\0';
	    str1[0]=exp[i];							// (op
	    str1[1]='\0';
	    strcat(str2,str1);
            strcat(str2,op2);							// (op op2
            strcat(str2,op1);							// (op op2 op1
	    str1[0]=')';							// (op op2 op1)
	    str1[1]='\0';
	    strcat(str2,str1);
            push(str2);
        }
        else
        {
            str1[0]='\0';
            str1[0]=exp[i];
            str1[1]='\0';
            push(str1);
        }
    }
        strcpy(str1,pop());
        printf("%s",str1);
    
}

void prein(char exp[20])							//converting prefix expression to infix
{
    int l,i;
    char str[20],str1[20],str2[20],op1[20],op2[20];
    for(i=(strlen(exp)-1);i>=0;i--)
    {
        if(exp[i]=='+'||exp[i]=='-'||exp[i]=='*'||exp[i]=='/')
        {
            strcpy(op1,pop());
            strcpy(op2,pop());
            str2[0]='\0';			
            str2[0]='(';							// (
            str2[1]='\0';
           
            strcat(str2,op1);							// (op1
	    str1[0]='\0';
            str1[0]=exp[i];
            str1[1]='\0';
	    strcat(str2,str1);							// (op1 op
	    strcat(str2,op2);							// (op1 op op2
	    str1[0]='\0';
            str1[0]=')';							// (op1 op op2)
            str1[1]='\0';
	    strcat(str2,str1);
            push(str2);
        }
        else
        {
            str1[0]='\0';
            str1[0]=exp[i];
            str1[1]='\0';
            push(str1);
        }
    }
        strcpy(str1,pop());
        printf("%s",str1);
    
}
void prepost(char exp[20])							//converting prefix expression to postfix
{
    int l,i;
    char str[20],str1[20],str2[20],op1[20],op2[20];
    for(i=(strlen(exp)-1);i>=0;i--)
    {
        if(exp[i]=='+'||exp[i]=='-'||exp[i]=='*'||exp[i]=='/')
        {
		strcpy(op1,pop());
		strcpy(op2,pop());
		str2[0]='\0';
		str2[0]='(';							// (
		str2[1]='\0';
		strcat(str2,op1);						// (op1
		strcat(str2,op2);						// (op1 op2
		str1[0]=exp[i];
		str1[1]='\0';
		strcat(str2,str1);						// (op1 op2 op
		str1[0]=')';
		str1[1]='\0';
		strcat(str2,str1);						// (op1 op2 op)
		push(str2);
	}
	else
	{
		str1[0]='\0';
		str1[0]=exp[i];
		str1[1]='\0';
		push(str1);
	}
	
     }
	strcpy(str1,pop());
	printf("%s",str1);
}
char pop1()									// pop function for 1-dimensional stack
{
	char temp=stack1[top];
	top--;
	return temp;
}

void push1(char str)								// pop function for 1-dimensional stack
{
	top++;
	stack1[top]=str;
}
char icp(char ch)								// Incoming stack priority
{
	if(ch=='(')
	return 0;
	else if(ch=='+' || ch=='-')
	return 1;
	else if(ch=='*' || ch=='/')
	return 2;
	else if(ch=='^')
	return 4;
	else
	return -1;
}

char isp(char ch)								// In Stack Priority
{
	if(ch=='(')
	return 0;
	else if(ch=='+' || ch=='-')
	return 1;
	else if(ch=='*' || ch=='/')
	return 2;
	else if(ch=='^')
	return 3;
	else
	return -1;
}

void inpost(char exp[20])							// converting infix to postfix
{
	int i,ch,k=0;
	char postfix[20];k=0;
	for(i=0;exp[i]!='\0';i++)
	{
		if(exp[i]=='(')
			push1(exp[i]);
		else if(exp[i]==')')
		{
			while((ch=pop1())!='(')
			{
				postfix[k]=ch;
				k++;
			}
		}
		else if(exp[i]=='+' || exp[i]=='-' || exp[i]=='*' || exp[i]=='/')
		{
			while(isp(stack1[top])>=icp(exp[i]))
			{
				postfix[k]=pop1();
				k++;
			}
			push1(exp[i]);
		}
		else
		{
			postfix[k]=exp[i];
			k++;
		}
	}
	while(top>=0)
	{
		postfix[k]=pop1();
		k++;
	}
	postfix[k]='\0';
	printf("%s",postfix);
}

char icp1(char ch)
{
	if(ch=='(')
	return 4;
	else if(ch=='+' || ch=='-')
	return 2;
	else if(ch=='*' || ch=='/')
	return 3;
	else if(ch=='^')
	return 5;
	else
	return -1;
}

char isp1(char ch)
{
	if(ch=='(')
	return 0;
	else if(ch=='+' || ch=='-')
	return 2;
	else if(ch=='*' || ch=='/')
	return 3;
	else if(ch=='^')
	return 6;
	else
	return -1;
}
void reverse (char prefix[20])						
{
    int i=0,j=0;
    char pre[20];
    while(prefix[i]!='\0')
        i++;
    i--;
    while(i>=0)
    {
        pre[j]=prefix[i];
        j++;
        i--;
       
    }
    pre[j]='\0';
    strcpy(prefix,pre);
}		
void inpre(char exp[20])							//converting infix to prefix
{
	int i,ch,k=0;
	char prefix[20];
	for(i=(strlen(exp)-1);i>=0;i--)
	{
		if(exp[i]==')')
			push1(exp[i]);
		else if(exp[i]=='(')
		{
			while((ch=pop1())!=')')
			{
				prefix[k]=ch;
				k++;
			}
		}
		else if(exp[i]=='+' || exp[i]=='-' || exp[i]=='*' || exp[i]=='/')
		{
			while(isp(stack1[top])>=icp(exp[i]))
			{
				prefix[k]=pop1();
				k++;
			}
			push1(exp[i]);
		}
		else
		{
			prefix[k]=exp[i];
			k++;
		}
	}
	while(top>=0)
	{
		prefix[k]=pop1();
		k++;
	}
	prefix[k]='\0';
	reverse(prefix);
	printf("%s",prefix);
}


int main()
{   
    int l,q; 
    char exp[20];
    do
    {	
	printf("\n1.Postfix to infix\n2.Postfix to prefix\n3.Prefix to Postfix\n4.Prefix to Infix\n5.Infix to Postfix\n6.Infix to prefix\n7.Exit\n");
	printf("\nEnter your choice:\t");
	scanf("%d",&q);
	printf("\nEnter the expression\t");
        scanf("%s",exp);
	switch(q)
	{
		case 1:
			printf("\nPOSTFIX TO INFIX\n");
			postin(exp);
			break;
		case 2:
			printf("\nPOSTFIX TO PREFIX\n");
			postpre(exp);
			break;
		case 3:
			printf("\nPREFIX TO POSTFIX\n");
			prepost(exp);
			break;
		case 4:
			printf("\nPREFIX TO INFIX\n");
			prein(exp);
			break;
		case 5:
			printf("\nINFIX TO POSTFIX\n");
			inpost(exp);
			break;
		case 6:
			printf("\nINFIX TO PREFIX\n");
			inpre(exp);
			break;
		case 7:
			return 0;
		default:
			return 0;
	}
    }while(q!=0);

}

